/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.yandex.practicum.kafka.telemetry.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TemperatureSensorAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1691581402876280548L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemperatureSensorAvro\",\"namespace\":\"ru.yandex.practicum.kafka.telemetry.event\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"hubId\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"temperature_c\",\"type\":\"int\"},{\"name\":\"temperature_f\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TemperatureSensorAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TemperatureSensorAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TemperatureSensorAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TemperatureSensorAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TemperatureSensorAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TemperatureSensorAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TemperatureSensorAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TemperatureSensorAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TemperatureSensorAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence hubId;
  private java.time.Instant timestamp;
  private int temperature_c;
  private int temperature_f;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TemperatureSensorAvro() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param hubId The new value for hubId
   * @param timestamp The new value for timestamp
   * @param temperature_c The new value for temperature_c
   * @param temperature_f The new value for temperature_f
   */
  public TemperatureSensorAvro(java.lang.CharSequence id, java.lang.CharSequence hubId, java.time.Instant timestamp, java.lang.Integer temperature_c, java.lang.Integer temperature_f) {
    this.id = id;
    this.hubId = hubId;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.temperature_c = temperature_c;
    this.temperature_f = temperature_f;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return hubId;
    case 2: return timestamp;
    case 3: return temperature_c;
    case 4: return temperature_f;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: hubId = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.time.Instant)value$; break;
    case 3: temperature_c = (java.lang.Integer)value$; break;
    case 4: temperature_f = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'hubId' field.
   * @return The value of the 'hubId' field.
   */
  public java.lang.CharSequence getHubId() {
    return hubId;
  }


  /**
   * Sets the value of the 'hubId' field.
   * @param value the value to set.
   */
  public void setHubId(java.lang.CharSequence value) {
    this.hubId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'temperature_c' field.
   * @return The value of the 'temperature_c' field.
   */
  public int getTemperatureC() {
    return temperature_c;
  }


  /**
   * Sets the value of the 'temperature_c' field.
   * @param value the value to set.
   */
  public void setTemperatureC(int value) {
    this.temperature_c = value;
  }

  /**
   * Gets the value of the 'temperature_f' field.
   * @return The value of the 'temperature_f' field.
   */
  public int getTemperatureF() {
    return temperature_f;
  }


  /**
   * Sets the value of the 'temperature_f' field.
   * @param value the value to set.
   */
  public void setTemperatureF(int value) {
    this.temperature_f = value;
  }

  /**
   * Creates a new TemperatureSensorAvro RecordBuilder.
   * @return A new TemperatureSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder newBuilder() {
    return new ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder();
  }

  /**
   * Creates a new TemperatureSensorAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TemperatureSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder(other);
    }
  }

  /**
   * Creates a new TemperatureSensorAvro RecordBuilder by copying an existing TemperatureSensorAvro instance.
   * @param other The existing instance to copy.
   * @return A new TemperatureSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for TemperatureSensorAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemperatureSensorAvro>
    implements org.apache.avro.data.RecordBuilder<TemperatureSensorAvro> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence hubId;
    private java.time.Instant timestamp;
    private int temperature_c;
    private int temperature_f;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.hubId)) {
        this.hubId = data().deepCopy(fields()[1].schema(), other.hubId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.temperature_c)) {
        this.temperature_c = data().deepCopy(fields()[3].schema(), other.temperature_c);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.temperature_f)) {
        this.temperature_f = data().deepCopy(fields()[4].schema(), other.temperature_f);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TemperatureSensorAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hubId)) {
        this.hubId = data().deepCopy(fields()[1].schema(), other.hubId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temperature_c)) {
        this.temperature_c = data().deepCopy(fields()[3].schema(), other.temperature_c);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.temperature_f)) {
        this.temperature_f = data().deepCopy(fields()[4].schema(), other.temperature_f);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hubId' field.
      * @return The value.
      */
    public java.lang.CharSequence getHubId() {
      return hubId;
    }


    /**
      * Sets the value of the 'hubId' field.
      * @param value The value of 'hubId'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder setHubId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.hubId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hubId' field has been set.
      * @return True if the 'hubId' field has been set, false otherwise.
      */
    public boolean hasHubId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hubId' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder clearHubId() {
      hubId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[2], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature_c' field.
      * @return The value.
      */
    public int getTemperatureC() {
      return temperature_c;
    }


    /**
      * Sets the value of the 'temperature_c' field.
      * @param value The value of 'temperature_c'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder setTemperatureC(int value) {
      validate(fields()[3], value);
      this.temperature_c = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature_c' field has been set.
      * @return True if the 'temperature_c' field has been set, false otherwise.
      */
    public boolean hasTemperatureC() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'temperature_c' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder clearTemperatureC() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature_f' field.
      * @return The value.
      */
    public int getTemperatureF() {
      return temperature_f;
    }


    /**
      * Sets the value of the 'temperature_f' field.
      * @param value The value of 'temperature_f'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder setTemperatureF(int value) {
      validate(fields()[4], value);
      this.temperature_f = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature_f' field has been set.
      * @return True if the 'temperature_f' field has been set, false otherwise.
      */
    public boolean hasTemperatureF() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'temperature_f' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro.Builder clearTemperatureF() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TemperatureSensorAvro build() {
      try {
        TemperatureSensorAvro record = new TemperatureSensorAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.hubId = fieldSetFlags()[1] ? this.hubId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.time.Instant) defaultValue(fields()[2]);
        record.temperature_c = fieldSetFlags()[3] ? this.temperature_c : (java.lang.Integer) defaultValue(fields()[3]);
        record.temperature_f = fieldSetFlags()[4] ? this.temperature_f : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TemperatureSensorAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TemperatureSensorAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TemperatureSensorAvro>
    READER$ = (org.apache.avro.io.DatumReader<TemperatureSensorAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










